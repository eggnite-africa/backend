# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  id: ID!
  content: String!
  productId: ID!
  parentId: ID
  replies: [Comment]
  userId: ID!
}

input CommentInput {
  productId: ID
  content: String

  """
  This refers to the comment id whether it's the parent or a standalone comment
  """
  parentId: ID
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input MakerInput {
  productId: ID!
  makerId: ID!
}

type Media {
  logo: String!
  pictures: [String!]!
  videos: [String]
}

input MediaInput {
  logo: String!
  pictures: [String!]!
  videos: [String]
}

type Mutation {
  addProduct(newProduct: NewProductInput!): Product!
  updateProduct(updatedProduct: UpdatedProductInput!): Product!
  addMaker(makerInput: MakerInput!): Product!
  deleteMaker(makerInput: MakerInput!): Product!
  deleteProduct(id: ID!): Boolean!
  checkProductExistance(productName: String!): Boolean!
  upvote(voteInput: VoteInput!): Vote!
  deleteVote(voteInput: VoteInput!): Boolean!
  addComment(commentInput: CommentInput!): Comment!
  deleteComment(commentId: ID!): Boolean!
  updateComment(commentInput: CommentInput!): Comment!
  signUp(UserInput: UserInput!): User!
  deleteUser(username: String!): Boolean!
  updateProfile(updatedProfile: UpdateProfileInput!): Profile!
}

input NewLinksInput {
  website: String!
  github: String
  appStore: String
  playStore: String
}

input NewProductInput {
  name: String!
  tagline: String!
  description: String
  media: MediaInput!
  links: NewLinksInput!
  makersIds: [ID!]
}

type Notification {
  id: ID!
  seen: Boolean!
  voteId: ID
  commentId: ID
  type: NotificationType!
}

"""This is needed to inform FE."""
enum NotificationType {
  VOTE
  COMMENT
}

enum OccupationType {
  STUDENT
  DEV
  ENTREPRENEUR
}

type Product {
  id: ID!
  name: String!
  tagline: String!
  description: String
  links: ProductLinks!
  media: Media!
  votes: [Vote!]
  comments: [Comment]
  makers: [User!]
  poster: User!
}

type ProductLinks {
  id: ID!
  website: String!
  github: String
  appStore: String
  playStore: String
}

type Profile {
  profilePicture: String!
  firstName: String!
  lastName: String!
  sex: SexType!
  birthDate: DateTime
  occupation: OccupationType!
  university: String
  bio: String
  socialLinks: [String]
}

input ProfileInput {
  profilePicture: String!
  firstName: String!
  lastName: String!
  sex: SexType!
  birthDate: DateTime
  occupation: OccupationType!
  bio: String
  socialLinks: [String]
  university: String!
}

type Query {
  products: [Product!]!
  product(name: String, id: ID): Product!
  users: [User!]!
  user(username: String!): User!
}

enum SexType {
  MALE
  FEMALE
}

type Subscription {
  voteAdded: Vote
  commentAdded: Comment
}

input UpdatedLinksInput {
  website: String
  github: String
  appStore: String
  playStore: String
}

input UpdatedProductInput {
  id: ID!
  tagline: String
  description: String
  media: MediaInput
  links: UpdatedLinksInput
}

input UpdateProfileInput {
  profilePicture: String
  firstName: String
  lastName: String
  sex: SexType
  birthDate: DateTime
  occupation: OccupationType
  bio: String
  socialLinks: [String]
  university: String
}

type User {
  id: ID!
  username: String!
  email: String!
  profile: Profile!
  comments: [Comment]
  votes: [Vote]
  products: [Product]
  notifications: [Notification]
}

input UserInput {
  username: String!
  email: String!
  password: String!
  profile: ProfileInput!
}

type Vote {
  id: ID!
  productId: ID!
  userId: ID!
}

input VoteInput {
  productId: ID!
}
