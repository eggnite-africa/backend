# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  id: ID!
  postedAt: DateTime!
  content: String!
  productId: ID!
  parentId: ID
  replies: [Comment]
  userId: ID!
}

input CommentInput {
  productId: ID
  content: String!

  """
  This refers to the comment id whether it's the parent or a standalone comment
  """
  parentId: ID
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Feedback {
  id: ID!
  userId: ID
  type: FeedbackType!
  content: String!
  status: FeedbackStatus!
  note: String
}

enum FeedbackStatus {
  DONE
  PENDING
  REFUSED
}

enum FeedbackType {
  BUG
  FEATURE
  OTHER
}

enum genderType {
  MALE
  FEMALE
}

input MakerInput {
  productId: ID!
  makerId: ID!
}

type Media {
  logo: String!
  pictures: [String!]!
  videos: [String]
}

type Mutation {
  addProduct(newProduct: NewProductInput!): Product!
  updateProduct(updatedProduct: UpdatedProductInput!): Product!
  addMaker(makerInput: MakerInput!): Product!
  deleteMaker(makerInput: MakerInput!): Product!
  deleteProduct(id: ID!): Boolean!
  upvote(voteInput: VoteInput!): Vote!
  deleteVote(voteInput: VoteInput!): Boolean!
  markNotificationAsSeen(id: ID!): Notification!
  signUp(UserInput: NewUserInput!): User!
  deleteUser(userId: ID!): Boolean!
  updateProfile(updatedProfile: UpdateProfileInput!, userId: ID!): Profile!
  addComment(commentInput: CommentInput!): Comment!
  deleteComment(commentId: ID!): Boolean!
  updateComment(commentInput: CommentInput!): Comment!
  addFeedback(feedback: NewFeedbackInput!): Feedback!
  markFeedbackAsDone(id: ID!): Feedback!
  markFeedbackAsRefused(reason: String, id: ID!): Feedback!
}

input NewFeedbackInput {
  type: FeedbackType!
  content: String!
  status: FeedbackStatus = PENDING
}

input NewLinksInput {
  website: String
  github: String
  appStore: String
  playStore: String
}

input NewMediaInput {
  logo: String
  pictures: [String!]!
  videos: [String]
}

input NewProductInput {
  name: String!
  tagline: String!
  description: String!
  media: NewMediaInput!
  links: NewLinksInput
  makersIds: [ID!]!
}

input NewUserInput {
  username: String!
  email: String
  password: String!
  profile: ProfileInput!
  type: userTypeEnum = USER
}

type Notification {
  id: ID!
  seen: Boolean!
  vote: Vote
  voteId: ID
  comment: Comment
  commentId: ID
  type: NotificationType!
}

"""This is needed to inform FE."""
enum NotificationType {
  VOTE
  COMMENT
}

enum OccupationType {
  STUDENT
  DEVELOPER
  ENTREPRENEUR
}

type Product {
  id: ID!
  name: String!
  tagline: String!
  description: String!
  links: ProductLinks
  media: Media!
  votes: [Vote!]
  comments: [Comment]
  makers: [User!]
  poster: User!
}

type ProductLinks {
  id: ID!
  website: String
  github: String
  appStore: String
  playStore: String
}

type Products {
  totalCount: Int!
  products: [Product]
  hasMore: Boolean!
}

type Profile {
  picture: String
  fullName: String!
  gender: genderType
  birthDate: DateTime
  occupation: OccupationType
  university: String
  company: String
  bio: String
  country: String
  socialLinks: [String]
}

input ProfileInput {
  picture: String
  fullName: String!
  gender: genderType
  birthDate: DateTime
  occupation: OccupationType
  bio: String
  socialLinks: [String]
  university: String
  company: String
  country: String
}

type Query {
  productsList(pageSize: Int = 7, page: Int): Products!
  product(name: String, id: ID): Product!
  searchProducts(query: String!): [Product]
  checkProductExistance(productName: String!): Boolean!
  users: [User!]!
  checkUsernameExistance(username: String!): Boolean!
  checkEmailExistance(email: String!): Boolean!
  user(id: ID, username: String): User!
  fetchAllFeedback: [Feedback]
  fetchFeedbackByUserId(userId: ID!): [Feedback]
}

input UpdatedLinksInput {
  website: String
  github: String
  appStore: String
  playStore: String
}

input UpdatedMediaInput {
  logo: String
  pictures: [String]
  videos: [String]
}

input UpdatedProductInput {
  id: ID!
  tagline: String
  description: String
  media: UpdatedMediaInput
  links: UpdatedLinksInput
}

input UpdateProfileInput {
  picture: String
  fullName: String!
  gender: genderType
  birthDate: DateTime
  occupation: OccupationType
  bio: String
  socialLinks: [String]
  university: String
  company: String
  country: String
}

type User {
  id: ID!
  username: String!
  email: String
  profile: Profile!
  comments: [Comment]
  votes: [Vote]
  products: [Product]
  notifications(seen: Boolean): [Notification]
  type: userTypeEnum
}

enum userTypeEnum {
  ADMIN
  USER
  MAKER
}

type Vote {
  id: ID!
  productId: ID!
  userId: ID!
}

input VoteInput {
  productId: ID!
}
